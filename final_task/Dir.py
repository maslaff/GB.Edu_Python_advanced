# üìå –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
#     –∏ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –ø—É—Ç—å –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ –ü–ö.
# üìå –°–æ–±–µ—Ä–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–æ–≤ namedtuple.
# üìå –ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç —Ö—Ä–∞–Ω–∏—Ç:
# ‚óã –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞,
# ‚óã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª,
# ‚óã —Ñ–ª–∞–≥ –∫–∞—Ç–∞–ª–æ–≥–∞,
# ‚óã –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞.
# üìå –í –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–±–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
#     –∏—Å–ø–æ–ª—å–∑—É—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.

import os
from collections import namedtuple
import logging
import argparse

file_object = namedtuple("file_object", ["name", "ext", "isdir", "parent_dir"])
log = logging.getLogger(__name__)

directory = ""


def traverse_directory(directory):
    filelist: list = []
    for root, dirs, files in os.walk(os.path.normpath(directory)):
        dobj = file_object(
            os.path.basename(root),
            "",
            True,
            os.path.basename(os.path.dirname(root)),
        )
        filelist.append(dobj)
        log.info(f"Finded directory: {dobj.name} in {dobj.parent_dir}")

        for file in files:
            fobj = file_object(
                *os.path.splitext(file),
                False,
                root.split("/")[-1],
            )
            filelist.append(fobj)
            log.info(f"Finded file: {fobj.name}{fobj.ext} in {fobj.parent_dir}")
    return filelist


def init():
    parser = argparse.ArgumentParser(description="View dir")
    parser.add_argument(
        "directory", metavar="directory", type=str, nargs="?", default=""
    )
    parser.add_argument("-l", metavar="logfile", type=str, default="log.log")
    arg = parser.parse_args()

    logging.basicConfig(filename=arg.l, filemode="w", level=logging.INFO)

    return arg.directory


def print_list(lst):
    for i in lst:
        print(
            f"{'DIR' if i.isdir else 'FILE':<4} "
            f"[{i.name:^{max(map(len, [i.name for i in lst]))}}] "
            f"- ext: {i.ext[1:]:<5} "
            f"- parent_dir: {i.parent_dir}"
        )


def __main():
    direc = init()
    lst = traverse_directory(os.path.abspath(direc))
    print_list(lst)


if __name__ == "__main__":
    __main()
